{"version":3,"sources":["galaxy.png","header/index.js","list/jobItem.js","list/jobListContainer.js","banner/index.js","list/index.js","detail/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","keyword","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","handleSearch","preventDefault","_this2","react_default","a","createElement","className","action","onSubmit","e","type","placeholder","onChange","Component","JobItem","onItemClick","detail","onJobClick","onClick","job","title","company","location","created_at","JobList","console","log","id","listing","map","jobItem","assign","key","Banner","src","bannerIcon","alt","SearchList","list","banner","jobListContainer","JobDetail","onBackBtnClick","navigateBackward","company_logo","style","height","dangerouslySetInnerHTML","__html","description","how_to_apply","App","updateJobList","jobs","isDetail","handleHistory","handleLoading","isLoading","loading","url","concat","fetch","then","response","json","data","src_header","src_detail","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93f83954.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/galaxy.9f24e643.png\";","import React, { Component } from 'react';\nimport './header.css';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { keyword: this.props.keyword };\n\n        // This binding is necessary to make `this` work in the callback\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ keyword: event.target.value });\n    }\n\n    handleSubmit(event) {\n        this.props.handleSearch(this.state.keyword)\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <header className=\"app-header\">\n                <form className=\"search-box\" action=\"#\" onSubmit={(e) => this.handleSubmit(e)} >\n                    <input type=\"text\" placeholder=\"Search eg: Java, Node, Aws\" value={this.state.keyword} className=\"app-search\" onChange={this.handleChange} />\n                </form>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass JobItem extends Component {\n\n    onItemClick = (detail) => {\n        this.props.onJobClick(detail);\n    }\n\n    render() {\n        return (\n            <li className=\"joblist\" onClick={() => this.onItemClick(this.props.job)}>\n                <h4 className=\"joblist_title\">{this.props.job.title}</h4>\n                <p className=\"joblist_company\">{this.props.job.company}</p>\n                <p>\n                    <span className=\"joblist_location\">{this.props.job.location}</span>\n                    <span className=\"joblist_created\">{this.props.job.created_at}</span>\n                </p>\n            </li>\n        );\n    }\n}\n\nexport default JobItem;\n","import React, { Component } from 'react';\nimport JobItem from \"./jobItem\";\n\nclass JobList extends Component {\n\n    render() {\n        console.log('onJobClick', this.props);\n\n        return (\n            <div id=\"listing\">\n                <ul>\n                    {\n                        this.props.listing.map(job => {\n                            return (\n                                <JobItem\n                                    {...this.props}\n                                    key={job.id}\n                                    job={job}/>\n                            );\n                        })\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default JobList;","import React, { Component } from 'react';\nimport bannerIcon from '../galaxy.png';\n\nclass Banner extends Component {\n    render() {\n        return (\n            <div>\n                <img src={bannerIcon} className=\"banner\" alt=\"banner\" />\n                <p> Search Open Software Jobs Worldwide</p>\n            </div>\n        );\n    }\n}\n\nexport default Banner;\n","import React, { Component } from 'react';\nimport JobList from \"./jobListContainer\";\nimport Banner from \"../banner\";\n\nclass SearchList extends Component {\n\n    render() {\n        console.log('this.props.list====>', this.props.list);\n\n        return (\n            <main className=\"content-area\">\n                <Banner />\n                <JobList listing={this.props.list} {...this.props} />\n            </main>\n        );\n    }\n}\n\nexport default SearchList;\n","import React, { Component } from 'react';\nimport './detail.css';\n\n// import JobList from \"./jobListContainer\";\n\nclass JobDetail extends Component {\n\n    onBackBtnClick = () => {\n        this.props.navigateBackward();\n    }\n\n    render() {\n        console.log(this.props)\n        return (\n            <main className=\"jobdetail_container\">\n                <button onClick={() => this.onBackBtnClick()} className=\"backBtn\">&#x2190; Back to job list</button>\n                    <br /> <br />\n                    {this.props.detail.company_logo &&\n                    <img src={this.props.detail.company_logo} alt={this.props.detail.company} style={{'height': '60px'}} /> }\n                    <h4 className=\"joblist_title\">{this.props.detail.title}</h4>\n                    <p className=\"joblist_company\">{this.props.detail.company}</p>\n                    <p>\n                        <span className=\"joblist_location\">{this.props.detail.location}</span>\n                        <span className=\"joblist_created\">{this.props.detail.created_at}</span>\n                    </p>\n                <div dangerouslySetInnerHTML={{ __html: this.props.detail.description }}></div>\n                <p dangerouslySetInnerHTML={{ __html: this.props.detail.how_to_apply }}></p>\n            </main>\n        );\n    }\n}\n\nexport default JobDetail;\n","import React, { Component } from 'react';\nimport Header from './header';\nimport SearchList from \"./list\";\nimport JobDetail from \"./detail\";\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: '',\n      listing: [],\n      isDetail: false,\n      job: null,\n      loading: false\n    };\n\n  }\n\n  updateJobList = (jobs) => {\n    this.setState({ listing: jobs, isDetail: false });\n  }\n\n  onJobClick = (job) => {\n    this.setState({ isDetail: true, job: job});\n  }\n\n  handleHistory = () => {\n    this.handleSearch(this.state.keyword);\n  }\n\n  handleLoading = (isLoading) => {\n    this.setState({ loading: isLoading });\n  }\n\n  handleSearch = (keyword) => {\n    this.handleLoading(true);\n    let url = `https://jobs.github.com/positions.json?search=${keyword}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        this.updateJobList(data)\n        this.handleLoading(false);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Header keyword={this.state.keyword} handleSearch={this.handleSearch} />\n\n        {!this.state.loading &&\n          this.state.isDetail &&\n            <JobDetail detail={this.state.job} navigateBackward={this.handleHistory} />\n        }\n\n        {!this.state.loading &&\n          !this.state.isDetail &&\n            <SearchList list={this.state.listing} onJobClick={this.onJobClick} />\n        }\n        {this.state.loading &&\n          <div className=\"loader\"></div>\n        }\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}